 repeat task.wait() until game:IsLoaded()

local function isAdonisAC(table) -- stupid check
	return rawget(table, "Detected") and typeof(rawget(table, "Detected")) == "function" and rawget(table, "RLocked")
end

warn("------------------------------")

for _, v in next, getgc(true) do
	if typeof(v) == "table" and isAdonisAC(v) then
		-- warn(warn, "founded")
		for i, v in next, v do
			warn(print, i, typeof(v))
			if rawequal(i, "Detected") then
				-- warn(warn, "^^^^^^^")
				local old;
				old = hookfunction(v, function(action, info, nocrash)
					if rawequal(action, "_") and rawequal(info, "_") and rawequal(nocrash, true) then
						-- warn("checkup")
						return old(action, info, nocrash)
					end
					-- warn(warn, "detected for :", action, info, nocrash)
					return task.wait(9e9)
				end)
				warn("bypassed adonis ac")
                break
			end
		end
	end
end


wait(0.1)

local Bracket = loadstring(game:HttpGet("https://raw.githubusercontent.com/AlexR32/Bracket/main/BracketV33.lua"))()
Bracket:Notification({Title = "Loaded, Fr0zenL4ke.ez / Have Fun.",Description = "Lolz",Duration = 3}) -- Duration can be nil for "x" to pop up
Bracket:Notification2({Title = "Loaded, Fr0zenL4ke.ez / Have Fun.",Duration = 4})
Bracket:Notification2({Title = "Loaded, Fr0zenL4ke.ez / Have Fun.",Duration = 4})
Bracket:Notification2({Title = "Loaded, Fr0zenL4ke.ez / Have Fun.",Duration = 4})
Bracket:Notification2({Title = "Loaded, Fr0zenL4ke.ez / Have Fun.",Duration = 4})
-- see source code for more hidden things i forgot to add in this example
local Window = Bracket:Window({Name = "Fr0zenL4ke.ez V3.2 || BETA_PHASE || Undetected || Build: 30/09/2023",Enabled = true,Color = Color3.new(1,0.5,0.25),Size = UDim2.new(0,496,0,496),Position = UDim2.new(0.5,-248,0.5,-248)}) do

    local Watermark = Window:Watermark({
        Title = "Fr0zenL4ke.ez V3.2 || BETA_PHASE",
        Flag = "UI/Watermark/Position",
        Enabled = true,
    })
    --Watermark.Enabled = true
    --Watermark.Title = "Text"
    --Watermark.Value = {0,0,0,0} -- Position, UDim2 but table

    local Tab = Window:Tab({Name = "Local Player"}) do


      --  local Divider = Tab:Divider({Text = "Divider",Side = "Left"})

    --    local Label = Tab:Label({Text = "Label",Side = "Left"})
    local Label = Tab:Label({Text = "These Might Not Work, Use With Caution.",Side = "Left"})

         local Toggle = Tab:Toggle({Name = "Attempt To > God",Flag = "atg",Side = "Left",Value = false,Callback = function(Value) 
_G.godattempt = Value

while true do
  if _G.godattempt then
    local player = game.Players.LocalPlayer
                      local character = player.Character or player.CharacterAdded:Wait()
                      local humanoid = character:FindFirstChildOfClass("Humanoid")
                      if humanoid then
                          humanoid.MaxHealth = math.huge
                          humanoid.Health = math.huge
                      end
  end
  if not _G.godattempt then
     break
  end
  wait()
end
        end})
        
         local Button = Tab:Button({Name = "Attempt To > Health Regen",Side = "Left",Callback = function() 
            local player = game.Players.LocalPlayer

            local function godModeEnabled()
                player.Character.Humanoid.MaxHealth = math.huge
                player.Character.Humanoid.Health = math.huge
                player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            end
            
            local function godModeDisabled()
                player.Character.Humanoid.MaxHealth = 100
                player.Character.Humanoid.Health = 100
                player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
            end
            
            local godMode = false
            
            godModeEnabled()
            wait()
            godModeDisabled()
        end})
        
           
        
        local Button = Tab:Button({Name = "Suicide",Side = "Left",Callback = function() 
        game.Player.LocalPlayer.Character.Humanoid.Health = 0
        end})
        
        local Button = Tab:Button({Name = "Rejoin",Side = "Left",Callback = function() 
            game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
                end})
        
        local Slider = Tab:Slider({Name = "Field of View Changer",Flag = "fov",Side = "Left",Min = 70,Max = 120,Value = 70,Precise = 1,Unit = "",Callback = function(Value) 
            game:GetService("Workspace").Camera.FieldOfView = Value
              end})
        
            local Label = Tab:Label({Text = "Anti-Things Might Be Detected, Remove Client AC.",Side = "Left"})
        
          local Button = Tab:Button({Name = "Anti-Seat",Side = "Left",Callback = function() 
            for i,v in next, workspace:GetDescendants() do
                if v:IsA'Seat' then
                    v:Destroy()
                end
            end
        end})
        
          local Button = Tab:Button({Name = "Anti-Logs [DTC]",Side = "Left",Callback = function() 
            while not game:IsLoaded() do wait() end

            repeat wait() until game.Players.LocalPlayer.Character
            
            local LP = game:GetService('Players').LocalPlayer
            local PlayerScripts = LP ~= nil and LP:FindFirstChild('PlayerScripts') or nil
            local ChatScript = PlayerScripts ~= nil and PlayerScripts:FindFirstChild('ChatScript') or nil
            local ChatMain = ChatScript ~= nil and ChatScript:FindFirstChild('ChatMain') or nil
            
            if LP and ChatMain ~= nil then
             local Old, Chatted, OldChatted = nil, Instance.new('BindableEvent'), LP.Chatted; Chatted.Name = LP.Name..'_Chatted_Event'
             Old = hookmetamethod(game, '__index', newcclosure(function(self, Index)
                   if checkcaller() and self == LP and Index == 'Chatted' then
                     return Chatted.Event
                  elseif not checkcaller() and self == LP and Index == 'Chatted' then
                    return OldChatted
                   end
            
                   return Old(self, Index)
             end))
            
            local Old2, MessagePosted = nil, require(ChatMain).MessagePosted
            if MessagePosted then
                Old2 = hookfunction(MessagePosted.fire, function(self, ...)
                    if not checkcaller() then
                        return Chatted:Fire(...)
                    end
                end)
            end
            end
            game.StarterGui:SetCore('SendNotification', { Title = 'Anti-Log - Fr0zenL4ke.ez'; Text = 'Anti-Log Enabled.'; })
        end})
        
        local Label = Tab:Label({Text = "Wardrobe.",Side = "Left"})
        
        local Button = Tab:Button({Name = "Dufflebag: On",Side = "Left",Callback = function() 
            game:GetService("ReplicatedStorage").Tas.Tas:FireServer(table.unpack({
                [1] = "Equip",
                [2] = "Tas",
                [3] = "HumanoidRootPart",
            }))
        end})
        
        local Button = Tab:Button({Name = "Dufflebag: Off",Side = "Left",Callback = function() 
            game:GetService("ReplicatedStorage").Tas.Tas:FireServer(table.unpack({
                [1] = "Unequip",
                [2] = "Tas",
                [3] = "HumanoidRootPart",
            }))
        end})
        
        local Dropdown = Tab:Dropdown({Name = "Outfitter",Flag = "outfit",Side = "Left",List = {
            {
                Name = "Custom Outfit",
                Mode = "Button", -- Button or Toggle
                Callback = function()
                    local args = {
                        [1] = "Clothing",
                        [2] = game:GetService("ReplicatedStorage"):WaitForChild("shirtNetwork"):WaitForChild("shirtStorage"):WaitForChild("Clothing"):WaitForChild("Boef White Long Sleeves")
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("shirtNetwork"):WaitForChild("AssignEntity"):FireServer(unpack(args))
                    wait(0.1)
                    local args = {
                        [1] = "Clothing",
                        [2] = game:GetService("ReplicatedStorage"):WaitForChild("broekNetwork"):WaitForChild("broekStorage"):WaitForChild("Clothing"):WaitForChild("Dsquared2 Black Jeans with LV Belt")
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("broekNetwork"):WaitForChild("AssignEntity"):FireServer(unpack(args))
                    wait(0.1)
                    local args = {
                        [1] = "Helmet",
                        [2] = game:GetService("ReplicatedStorage"):WaitForChild("maskerNetwork"):WaitForChild("maskerStorage"):WaitForChild("Helmet"):WaitForChild("Pion")
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("maskerNetwork"):WaitForChild("AssignEntity"):FireServer(unpack(args))
                end
            },
            {
                Name = "Black Suit",
                Mode = "Button",
                Callback = function()
                    local args = {
                        [1] = "Clothing",
                        [2] = game:GetService("ReplicatedStorage"):WaitForChild("shirtNetwork"):WaitForChild("shirtStorage"):WaitForChild("Clothing"):WaitForChild("White Button Up w/ Black Suit [+] -")
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("shirtNetwork"):WaitForChild("AssignEntity"):FireServer(unpack(args))
                    wait(0.1)
                    local args = {
                        [1] = "Clothing",
                        [2] = game:GetService("ReplicatedStorage"):WaitForChild("broekNetwork"):WaitForChild("broekStorage"):WaitForChild("Clothing"):WaitForChild("Black Coat Pants [-]")
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("broekNetwork"):WaitForChild("AssignEntity"):FireServer(unpack(args))
                    
                end
            },
             {
                Name = "White Suit",
                Mode = "Button", -- Button or Toggle
                Callback = function()
                    local args = {
                        [1] = "Clothing",
                        [2] = game:GetService("ReplicatedStorage"):WaitForChild("shirtNetwork"):WaitForChild("shirtStorage"):WaitForChild("Clothing"):WaitForChild("White Tuxedo White Suit Spy James Bond 007 Elegant")
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("shirtNetwork"):WaitForChild("AssignEntity"):FireServer(unpack(args))
                wait(0.1)   
                local args = {
                    [1] = "Clothing",
                    [2] = game:GetService("ReplicatedStorage"):WaitForChild("broekNetwork"):WaitForChild("broekStorage"):WaitForChild("Clothing"):WaitForChild("White Tuxedo White Suit Spy James Bond 007 Pants")
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("broekNetwork"):WaitForChild("AssignEntity"):FireServer(unpack(args))
                
                end
            },
             {
                Name = "Undercover Agent",
                Mode = "Button", -- Button or Toggle
                Callback = function()
                    local args = {
                        [1] = "Clothing",
                        [2] = game:GetService("ReplicatedStorage"):WaitForChild("polNetwork"):WaitForChild("POLStorage"):WaitForChild("Clothing"):WaitForChild("Undercover")    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("polNetwork"):WaitForChild("AssignEntity"):FireServer(unpack(args))
                end
            },
        }})
        
       
     --[[   local Button = Tab:Button({Name = "Button",Side = "Left",Callback = function() 
        print("Clicked.")
        end})

        local Toggle = Tab:Toggle({Name = "Toggle",Flag = "Toggle",Side = "Left",Value = false,Callback = function(Value) 
        print(Value)
        end})
       

        local ToggleKeybind = Toggle:Keybind({Flag = "Toggle/Keybind",Value = "NONE",DoNotClear = false,Mouse = false,Callback = function(Key_String,Pressed_Bool,Toggle_Bool) end,
        Blacklist = {"W","A","S","D","Slash","Tab","Backspace","Escape","Space","Delete","Unknown","Backquote"}})
        

        local ToggleColorpicker = Toggle:Colorpicker({Flag = "Toggle/Colorpicker",Value = {1,1,1,0,false},Callback = function(HSVAR_Table,Color3) end})
       

        local Slider = Tab:Slider({Name = "Slider",Flag = "Slider",Side = "Left",Min = 0,Max = 100,Value = 50,Precise = 2,Unit = "",Callback = function(Value_Number) end})
        

        local Textbox = Tab:Textbox({Name = "Textbox",Flag = "Textbox",Side = "Left",Value = "Text",Placeholder = "Placeholder",NumberOnly = false,Callback = function(Text_String,EnterPressed) end})
         

        local Keybind = Tab:Keybind({Name = "Keybind",Flag = "Keybind",Side = "Left",Value = "NONE",Mouse = false,DoNotClear = false,Callback = function(Key_String,Pressed_Bool,Toggle_Bool) end,
        Blacklist = {"W","A","S","D","Slash","Tab","Backspace","Escape","Space","Delete","Unknown","Backquote"}})
        
        
        local Dropdown = Tab:Dropdown({Name = "Dropdown",Flag = "Dropdown",Side = "Left",List = {
            {
                Name = "Head",
                Mode = "Toggle", -- Button or Toggle
                Value = false, -- Default
                Callback = function(Selected)
                    print(Selected)
                end
            },
            {
                Name = "HumanoidRootPart",
                Mode = "Toggle",
                Value = false,
                Callback = function(Selected)
                    print(Selected)
                end
            }
        }})
        --Dropdown.Name = "Name"
        --Dropdown.Value = {"Head"} -- Array of options to enable/select
        --Dropdown:BulkAdd(List_Table)
        --Dropdown:AddOption(Option_Table)
        --Dropdown:RemoveOption("OptionName")
        --Dropdown:Clear()
        --Dropdown:ToolTip("Text")

        local Colorpicker = Tab:Colorpicker({Name = "Colorpicker",Flag = "Colorpicker",Side = "Left",Value = {1,1,1,0,false},Callback = function(HSVAR_Table,Color3) end})
        --Colorpicker.Name = "Name"
        --Colorpicker.Value = {1,1,1,0,false} -- H,S,V,Alpha,Rainbow (HSVAR)
        --Colorpicker.Callback = function(HSVAR_Table,Color3) end
        --Colorpicker:ToolTip("Text")
        --]]

        local Section = Tab:Section({Name = "Exploitations",Side = "Right"}) do
            
          --  local Label = Tab:Label({Text = "Use With Caution.",Side = "Right"})
            
            local Button = Tab:Button({Name = "Remove Client Anti-Cheat",Side = "Right",Callback = function() 
                NotificationLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/lobox920/Notification-Library/Main/Library.lua"))()
                NotificationLibrary:SendNotification("Info", "Bypass Is Already Enabled [On Startup]", 7)
        end})
        
          local Button = Tab:Button({Name = "Remove Client Cooldowns",Side = "Right",Callback = function() 
            game:GetService("Workspace")["Kassa Overval Systeem"].Kassa.Kassa.Cooldown:Destroy()
            game:GetService("Workspace")["Kassa Overval Systeem"].Kassa.Kassa.Cooldown:Destroy()
            game:GetService("Workspace")["Kassa Overval Systeem"].Kassa.Kassa.Cooldown:Destroy()
            game:GetService("Workspace").Plank11.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank12.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank8.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank9.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank7.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank4.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank5.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank6.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank3.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank2.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank1.Trigger.Cooldown:Destroy()
            game:GetService("Workspace").Plank10.Trigger.Cooldown:Destroy()
        end})
        
         local Button = Tab:Button({Name = "Remove Client SafeZones",Side = "Right",Callback = function() 
        print("Clicked.")
        end})
            
            local Toggle = Tab:Toggle({Name = "Infinite Jump",Flag = "infj",Side = "Right",Value = false,Callback = function(Value) 
                _G.infinjump = (Value)

                -- Get the local player and their mouse
                local player = game:GetService("Players").LocalPlayer
                local mouse = player:GetMouse()
                
                -- Listen for the spacebar key press to jump repeatedly
                mouse.KeyDown:connect(function(key)
                    if _G.infinjump and key:byte() == 32 then
                        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            humanoid:ChangeState("Jumping")
                            wait(0.1)
                            humanoid:ChangeState("Seated")
                        end
                    end
                end)
        end})
        
        local Toggle = Tab:Toggle({Name = "No-Clip",Flag = "noclip",Side = "Right",Value = false,Callback = function(Value) 
            if (Value) then
                NoclipLoop = game:GetService("RunService").Stepped:Connect(function()
                    for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                        if v:IsA("BasePart") and v.CanCollide == true then
                            v.CanCollide = false
                        end
                    end
                end)
            elseif Value == false and NoclipLoop then
                NoclipLoop:Disconnect()
            end
        end})
        
        local Toggle = Tab:Toggle({Name = "BunnyHop",Flag = "bhop",Side = "Right",Value = false,Callback = function(Value) 
            _G.bhop = Value

            local originalWalkSpeed = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed
            local originalGravity = game.Workspace.Gravity
            local originalJumpPower = game.Players.LocalPlayer.Character.Humanoid.JumpPower
            
            if _G.bhop then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 180
                game.Workspace.Gravity = 500
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = 80
                
                game:GetService("RunService").Heartbeat:Connect(function()
                    if _G.bhop then
                        game.Players.LocalPlayer.Character.Humanoid.Jump = true
                    end
                end)
            else
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = originalWalkSpeed
                game.Workspace.Gravity = originalGravity
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = originalJumpPower
            end
        end})
        
        local Toggle = Tab:Toggle({Name = "Superman Modus",Flag = "smm",Side = "Right",Value = false,Callback = function(Value) 
_G.superman = Value

while true do
  if _G.superman then
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 230
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = 230
  end
  if not _G.superman then
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
  end
  wait()
end
        
        end})
        
         local Toggle = Tab:Toggle({Name = "Disco Modus [LocalChar]",Flag = "dmm",Side = "Right",Value = false,Callback = function(Value) 
            _G.rainbowaura = Value

            if _G.rainbowaura then
                local function rainbowHighlight()
                    local lp = game:GetService("Players").LocalPlayer
            
                    while _G.rainbowaura do
                        local Highlight = Instance.new("Highlight")
                        Highlight.FillColor = Color3.fromHSV(tick() % 1, 1, 0.80)
                        Highlight.OutlineColor = Color3.fromHSV(tick() % 1, 1, 0.80)
                        Highlight.FillTransparency = 0.40
                        Highlight.Parent = lp.Character
                        wait(0.1)
                        Highlight:Destroy()
                    end
                end
            
                -- Start the rainbow aura loop.
                rainbowHighlight()
            else
                -- If rainbow aura is not enabled, call the NormalCharacter function.
                NormalCharacter()
            end
            
        end})

        repeat wait() 
        until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid") 
        local mouse = game.Players.LocalPlayer:GetMouse() 
        repeat wait() until mouse
        local player = game.Players.LocalPlayer
        local mouse = player:GetMouse()
        
        local plr = player
        local torso = nil
        local flying = false
        local deb = true
        local ctrl = {f = 0, b = 0, l = 0, r = 0}
        local lastctrl = {f = 0, b = 0, l = 0, r = 0}
        local maxspeed = 50
        local speed = 0
        local flySpeed = 1 -- Default fly speed
        
        function Fly()
            local character = plr.Character
            if character then
                torso = character:WaitForChild("HumanoidRootPart")
                local bg = Instance.new("BodyGyro", torso)
                bg.P = 9e4
                bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
                bg.cframe = torso.CFrame
                local bv = Instance.new("BodyVelocity", torso)
                bv.velocity = Vector3.new(0, 0.1, 0)
                bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
                repeat
                    wait()
                    plr.Character.Humanoid.PlatformStand = true
                    if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
                        speed = speed + (0.5 + (speed / maxspeed)) * flySpeed
                        if speed > maxspeed * flySpeed then
                            speed = maxspeed * flySpeed
                        end
                    elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
                        speed = speed - 1
                        if speed < 0 then
                            speed = 0
                        end
                    end
                    if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
                        bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f + ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l + ctrl.r, (ctrl.f + ctrl.b) * 0.2, 0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * speed
                        lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
                    elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
                        bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f + lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l + lastctrl.r, (lastctrl.f + lastctrl.b) * 0.2, 0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * speed
                    else
                        bv.velocity = Vector3.new(0, 0.1, 0)
                    end
                    bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f + ctrl.b) * 50 * speed / (maxspeed * flySpeed)), 0, 0)
                until not flying
                ctrl = {f = 0, b = 0, l = 0, r = 0}
                lastctrl = {f = 0, b = 0, l = 0, r = 0}
                speed = 0
                bg:Destroy()
                bv:Destroy()
                plr.Character.Humanoid.PlatformStand = false
            end
        end
        
        local function StartFlying()
            if flying then
                return
            end
            flying = true
            Fly()
        end
        
        local function StopFlying()
            if not flying then
                return
            end
            flying = false
        end
        
        mouse.KeyDown:Connect(function(key)
            if key:lower() == "e" then
                StartFlying()
            elseif key:lower() == "w" then
                ctrl.f = 1
            elseif key:lower() == "s" then
                ctrl.b = -1
            elseif key:lower() == "a" then
                ctrl.l = -1
            elseif key:lower() == "d" then
                ctrl.r = 1
            end
        end)
        
        mouse.KeyUp:Connect(function(key)
            if key:lower() == "e" then
                StopFlying()
            elseif key:lower() == "w" then
                ctrl.f = 0
            elseif key:lower() == "s" then
                ctrl.b = 0
            elseif key:lower() == "a" then
                ctrl.l = 0
            elseif key:lower() == "d" then
                ctrl.r = 0
            end
        end)
        
        local function Unfly()
            StopFlying()
        end
        
        local function HandleFlyCommand(Arguments, Speaker)
            if Arguments[1] then
                local newFlySpeed = tonumber(Arguments[1])
                if newFlySpeed and newFlySpeed > 0 then
                    flySpeed = newFlySpeed
                    Speaker:SendSystemMessage("Fly speed set to " .. flySpeed, Color3.fromRGB(255, 255, 0))
                else
                    Speaker:SendSystemMessage("Invalid fly speed value.", Color3.fromRGB(255, 0, 0))
                end
            else
                StartFlying()
            end
        end
        
        local function HandleUnflyCommand(Arguments, Speaker)
            Unfly()
        end
        
           local Toggle = Tab:Toggle({Name = "Flight",Flag = "fly",Side = "Right",Value = false,Callback = function(Value) 
            if Value then
                HandleFlyCommand({}, game.Players.LocalPlayer) -- Start flying when the switch is turned on
            else
                HandleUnflyCommand({}, game.Players.LocalPlayer) -- Stop flying when the switch is turned off
            end
        end})

        -- Floating Part
local Part = Instance.new("Part")
Part.Size = Vector3.new(5, 1, 5)
Part.Parent = game:GetService("Workspace")
Part.Anchored = true
Part.Transparency = 1
        
         local Toggle = Tab:Toggle({Name = "Float",Flag = "float",Side = "Right",Value = false,Callback = function(Value) 
            getgenv().Float = Value
            if Float == true then
                spawn(function()
                    while Float == true do
                        Part.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, -4, 0)
                        task.wait(.05)
                    end
                end)
            end
            if Float == false then
                Part.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 999, 0)
            end
        end})
        
         local Toggle = Tab:Toggle({Name = "Spinner [Blatant]",Flag = "spinner",Side = "Right",Value = false,Callback = function(Value) 
            _G.spinner = (Value)
        end})

        --// Under all
local L_165_ = false
local L_166_ = game:GetService("UserInputService")

L_166_.InputBegan:Connect(function(L_167_arg0, L_168_arg1)
    if _G.enabled and L_165_ == false then
        L_165_ = true
        wait()
        getgenv().urspeed = 500
        local L_169_ = game.Players.LocalPlayer.Character
        while wait() and _G.enabled do
            L_169_.HumanoidRootPart.CFrame = L_169_.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(urspeed), 0)
        end
        L_165_ = false
        getgenv().urspeed = 0
    end
end)

game:GetService('RunService').Stepped:connect(function()
    if (_G.enabled == false) then
        stopTracks();
    end
end)


        
         local Toggle = Tab:Toggle({Name = "Enable WalkSpeed Change",Flag = "ewsc",Side = "Right",Value = false,Callback = function(Value) 
            walkspeedEnabled = Value
        if not Value then
            game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = 16
        end
        end})
        
         local Toggle = Tab:Toggle({Name = "Enable JumpPower Change",Flag = "ejpc",Side = "Right",Value = false,Callback = function(Value) 
            jumppowerEnabled = Value
            if not Value then
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = 50
            end
        end})
            
         -- local Label = Tab:Label({Text = "Value Changers.",Side = "Right"})
         
         local Slider = Tab:Slider({Name = "Flight Speed",Flag = "fs",Side = "Right",Min = 0,Max = 100,Value = 50,Precise = 2,Unit = "",Callback = function(Value) 
              
              end})
              
                local Slider = Tab:Slider({Name = "Spinner Speed",Flag = "sp",Side = "Right",Min = 100,Max = 2000,Value = 500,Precise = 2,Unit = "",Callback = function(Value) 
                    if _G.enabled then
                        getgenv().urspeed = Value
                    else
                        getgenv().urspeed = 0
                    end --// Speed
              end})
              
                local Slider = Tab:Slider({Name = "WalkSpeed",Flag = "ws",Side = "Right",Min = 16,Max = 400,Value = 16,Precise = 1,Unit = "",Callback = function(Value) 
                    if walkspeedEnabled then
                        game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
                    end
              end})
              
                local Slider = Tab:Slider({Name = "JumpPower",Flag = "jp",Side = "Right",Min = 50,Max = 400,Value = 50,Precise = 1,Unit = "",Callback = function(Value) 
                    if jumppowerEnabled then
                        game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = Value
                    end
              end})
            
            
            
            
        end
    end
    
    
    
        local Online = Window:Tab({Name = "Server Options"}) do

            local playerName = ""
      
            local Textbox = Online:Textbox({Name = "Choose Target",Flag = "cts",Side = "Left",Value = "",Placeholder = "Player Name Here [Display, Full, Partial]",NumberOnly = false,Callback = function(Text) 
                playerName = Text
            end})

             -- Function to find a player by partial name
function FindPlayerByPartialName(partialName)
    local Players = game:GetService("Players")
    partialName = partialName:lower()

    for _, player in ipairs(Players:GetPlayers()) do
        local playerNameLower = player.Name:lower()
        local displayNameLower = player.DisplayName and player.DisplayName:lower() or ""
        
        if string.find(playerNameLower, partialName) or string.find(displayNameLower, partialName) then
            return player
        end
    end
    
    return nil
end

            local Toggle = Online:Toggle({Name = "View > Player",Flag = "viewp",Side = "Left",Value = false,Callback = function(Value) 
                local player = nil

    if Value then
        local playerName = playerName -- Replace this with the partial name you want to find
        player = FindPlayerByPartialName(playerName)
    else
        player = game:GetService("Players").LocalPlayer
    end

    if player then
        game.Workspace.CurrentCamera.CameraSubject = player.Character.Humanoid
    end
                end})

                local loopTeleport = false

-- Function to find a player by partial name
function FindPlayerByPartialName(partialName)
    local Players = game:GetService("Players")
    partialName = partialName:lower()

    for _, player in ipairs(Players:GetPlayers()) do
        local playerNameLower = player.Name:lower()
        local displayNameLower = player.DisplayName and player.DisplayName:lower() or ""
        
        if string.find(playerNameLower, partialName) or string.find(displayNameLower, partialName) then
            return player
        end
    end
    
    return nil
end

                local Toggle = Online:Toggle({Name = "LoopTP > Player",Flag = "looptpp",Side = "Left",Value = false,Callback = function(Value) 
                    loopTeleport = Value

                    if loopTeleport then
                        while loopTeleport do
                            local partialName = playerName -- Replace this with the partial name you want to search for
                            local player = FindPlayerByPartialName(partialName)
                
                            if player then
                                local p1 = game.Players.LocalPlayer.Character.HumanoidRootPart
                                local p2 = player.Name
                                local pos = p1.CFrame
                                p1.CFrame = game.Players[p2].Character.HumanoidRootPart.CFrame
                            else
                                print("Could not find player with name containing '" .. partialName .. "'")
                            end
                
                            wait() -- Wait 1 second before teleporting again
                        end
                    else
                        print("Loop Teleport > Player turned off")
                    end
                    end})

                    function FindPlayerByPartialName(partialName)
                        local Players = game:GetService("Players")
                        partialName = partialName:lower()
                    
                        for _, player in ipairs(Players:GetPlayers()) do
                            local playerNameLower = player.Name:lower()
                            local displayNameLower = player.DisplayName and player.DisplayName:lower() or ""
                            
                            if string.find(playerNameLower, partialName) or string.find(displayNameLower, partialName) then
                                return player
                            end
                        end
                        
                        return nil
                    end
                    
                    -- Add the Teleport button

                    local Button = Online:Button({Name = "TP > Player",Side = "Left",Callback = function() 
                        local partialName = playerName -- Ensure playerName is defined
            
                        local player = FindPlayerByPartialName(partialName)
                        
                        if player then
                            local localPlayer = game.Players.LocalPlayer
                            local p1 = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
                            
                            if p1 and player.Character then
                                local p2 = player.Name
                                p1.CFrame = player.Character:FindFirstChild("HumanoidRootPart").CFrame
                            else
                                print("Could not teleport. Missing character parts.")
                            end
                        else
                            print("Could not find player with name containing '" .. partialName .. "'")
                        end
                        end})

                        local Button = Online:Button({Name = "Player > You [Can Kill, Client]",Side = "Left",Callback = function() 
                            local playerName = playerName  -- Replace with the partial name you want to use

                            function findPlayerByName(partialName)
                                for _, player in pairs(game.Players:GetPlayers()) do
                                    if string.find(string.lower(player.Name), string.lower(partialName)) then
                                        return player
                                    end
                                end
                                return nil
                            end
                        
                            local targetPlayer = findPlayerByName(playerName)
                            if targetPlayer then
                                local name = targetPlayer.Name
                        
                                function cbringTarget()
                                    repeat
                                        task.wait()
                                        game.Players[name].Character.HumanoidRootPart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 3.6)
                                    until game.Players[name].Character.Humanoid.Health == 0
                                end
                        
                                cbringTarget()
                            else
                                print("Player not found!")
                            end
                            end})

                            local Divider = Online:Divider({Text = "Function || Trolling",Side = "Left"})

                            local Button = Online:Button({Name = "Fling Player",Side = "Left",Callback = function() 
                                local playerName = playerName -- Replace with the partial name or display name you want to search for
    
    local Target = FindPlayerByPartialName(playerName)
    if Target then
        local oldCFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame

        local Thrust = Instance.new('BodyThrust', game.Players.LocalPlayer.Character.HumanoidRootPart)
        Thrust.Force = Vector3.new(9999, 9999, 9999)
        Thrust.Name = "YeetForce"

        repeat
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame
            Thrust.Location = Target.Character.HumanoidRootPart.Position
            game:FindService("RunService").Heartbeat:wait()
        until not Target.Character:FindFirstChild("Head")

        wait(3)  -- wait for 3 seconds

        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = oldCFrame

        Thrust:Destroy() -- remove the BodyThrust instance
    else
        notif("No player selected")
    end
                                end})

                                local Button = Online:Button({Name = "Bring Player [Need Tiewraps]",Side = "Left",Callback = function() 
                                 -- Function to find a player by partial or display name
local function findPlayerByName(playerName)
    local players = game:GetService("Players"):GetPlayers()
    
    for _, player in pairs(players) do
        if player.Name:lower():match(playerName:lower()) or player.DisplayName:lower():match(playerName:lower()) then
            return player
        end
    end
    
    return nil
end

-- Check if the player has the tool "Tiewraps" in their backpack
local player = game:GetService("Players").LocalPlayer
local backpack = player.Backpack
local toolName = "Tiewraps"  -- Change to the name of your tool
local tool = backpack:FindFirstChild(toolName)

if tool then
    -- Equip the tool
    player.Character:WaitForChild("Humanoid").ToolInHand = tool

    -- Notify the player
    local NotificationLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/lobox920/Notification-Library/Main/Library.lua"))()
    NotificationLibrary:SendNotification("Info", "Fr0zen's Bring: When You TP To Target Hold E", 5)
    wait(0.5)
    NotificationLibrary:SendNotification("Info", "Fr0zen's Bring: GET READY", 5)
    wait(3)

    -- Player name to search for (can be partial or display name)
    local playerName = playerName -- Change to the desired player name
    local selectedPlayerObject = findPlayerByName(playerName)

    if selectedPlayerObject then
        local startTime = tick()  -- Get the current time in seconds
        local duration = 4  -- Duration of the loop in seconds

        while tick() - startTime < duration do
            -- Teleport to the selected player
            player.Character:MoveTo(selectedPlayerObject.Character.HumanoidRootPart.Position)
            wait(0.1) -- Wait for the next loop iteration
        end
    end

    -- Return to the original position
    player.Character:MoveTo(originalCFrame.p)
else
    -- Notify the player that they need the tool
    local NotificationLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/lobox920/Notification-Library/Main/Library.lua"))()
    NotificationLibrary:SendNotification("Info", "Fr0zen's Bring: You Need Tiewraps Mate", 5)
end
                                    end})

                                    local Button = Online:Button({Name = "Tiewrap Abuse",Side = "Left",Callback = function() 
                                      -- Check if the fist tool exists in the player's backpack
local playerBackpack = game:GetService("Players").LocalPlayer.Backpack
local tiewrapsTool = playerBackpack:FindFirstChild("Tiewraps")

if tiewrapsTool then
    -- The player has the "Tiewraps" tool
    NotificationLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/lobox920/Notification-Library/Main/Library.lua"))()
    NotificationLibrary:SendNotification("Info", "Fr0zen's Abuser: When You TP To Target Hold E", 5)
    wait(0.5)
    NotificationLibrary:SendNotification("Info", "Fr0zen's Abuser: When You TP To Target Hold E", 5)
    wait(0.5)
    NotificationLibrary:SendNotification("Info", "Fr0zen's Abuser: GET READY", 5)
    wait(3)

    -- Store the original position before the loop
    local originalCFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame

    -- Function to find a player by partial or display name
    local function findPlayerByName(playerName)
        local players = game:GetService("Players"):GetPlayers()
        for _, player in pairs(players) do
            if player.Name:lower():match(playerName:lower()) or player.DisplayName:lower():match(playerName:lower()) then
                return player
            end
        end
        return nil
    end

    -- Player name to search for (can be partial or display name)
    local playerName = playerName  -- Change "PartialNameHere" to the desired partial or display name
    local selectedPlayerObject = findPlayerByName(playerName)
    if selectedPlayerObject then
        local startTime = tick()  -- Get the current time in seconds
        local duration = 4  -- Duration of the loop in seconds

        while tick() - startTime < duration do
            -- Teleport to the selected player
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = selectedPlayerObject.Character.HumanoidRootPart.CFrame
            wait() -- Wait for the next loop iteration
        end
    end

    -- Return to the original position
    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = originalCFrame
else
    -- The player does not have the "Tiewraps" tool
    NotificationLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/lobox920/Notification-Library/Main/Library.lua"))()
    NotificationLibrary:SendNotification("Info", "Fr0zen's Bring: You Need Tiewraps Mate", 5)
end

local localPlayer = game.Players.LocalPlayer
local humanoid = localPlayer.Character.Humanoid
local health = humanoid.Health

if health < 1 then
    local NotificationLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/lobox920/Notification-Library/Main/Library.lua"))()
    NotificationLibrary:SendNotification("Error", "Use God Mode First!", 3)
else
    local cframePos = localPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)

    local platform = Instance.new("Part")
    platform.Size = Vector3.new(20, 1, 20)
    platform.Position = cframePos.p
    platform.CFrame = CFrame.new(cframePos.p)
    platform.Anchored = true
    platform.Parent = game.Workspace

    localPlayer.Character.HumanoidRootPart.CFrame = platform.CFrame + Vector3.new(0, 5, 0)
    wait(0.5)
    localPlayer.Character.HumanoidRootPart.CFrame = platform.CFrame + Vector3.new(0, 1, 0)

    local NotificationLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/lobox920/Notification-Library/Main/Library.lua"))()
    NotificationLibrary:SendNotification("Info", "lolz", 3)
end
                                        end})

                                        local Button = Online:Button({Name = "Kill All [Kicks]",Side = "Right",Callback = function() 
                                            for k, v in pairs(game.Players:GetChildren()) do 
                                                local ohInstance1 = workspace[v.Name].Humanoid
                                                game:GetService("ReplicatedStorage").ACS_Engine.Eventos.CreateOwner:FireServer(ohInstance1)
                                                local ohInstance1 = workspace[v.Name].Humanoid
                                                local ohNumber2 = math.huge
                                                local ohNumber3 = 0
                                                local ohNumber4 = 0
                                                local ohString5 = "{e012c8d3-d924-42c7-9f1b-a05f716bf7aa}-439403718"
                                                game:GetService("ReplicatedStorage").ACS_Engine.Eventos.Damage:FireServer(ohInstance1, ohNumber2, ohNumber3, ohNumber4, ohString5)
                                        end
                                        wait(0.3)
                                        game.Players.LocalPlayer:kick("Fr0zenL4ke.ez | Kill All Worked... Now Rejoin.")
                                            end})

                                            local Toggle = Online:Toggle({Name = "CBring All > You [Can Kill, Client]",Flag = "cbringall",Side = "Right",Value = false,Callback = function(Value) 
                                                local LocalPlayer = game:GetService("Players").LocalPlayer
                                                _G.active = Value -- Set to true when you want the teleportation to occur
                                                
                                                game:GetService("RunService").RenderStepped:Connect(function()
                                                    if _G.active then
                                                        local localPlayer = game.Players.LocalPlayer
                                                        local teleportPosition = localPlayer.Character.HumanoidRootPart.CFrame.Position + localPlayer.Character.HumanoidRootPart.CFrame.lookVector * 5 -- Adjust the distance as needed
                                                        local players = game.Players:GetPlayers()
                                                
                                                        for i, player in ipairs(players) do
                                                            if player ~= localPlayer then
                                                                local offset = Vector3.new(0, 0, i * 3) -- Adjust the spacing between players
                                                                player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPosition + offset)
                                                            end
                                                        end
                                                    end
                                                end)
                                                end})
    
    end

 
    local Label = Online:Label({Text = "Hitbox Extender",Side = "Right"})

    local Slider = Online:Slider({Name = "Head: SiZe",Flag = "headsizes",Side = "Right",Min = 1,Max = 250,Value = 1,Precise = 1,Unit = "",Callback = function(a) 
        --// Local Settings
local Settings = {
    Size = a, -- Adjust this value to set the desired head size
}

--// Services
local Players = game:GetService("Players")

--// Variables
local LocalPlayer = Players.LocalPlayer

--// Functions
function Alive(player)
    if player then
        return player.Character and player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Humanoid") or false
    end
    return false
end

-- Function to make a part transparent
function MakePartTransparent(part)
    local transparencyValue = 0.5 -- Adjust transparency as needed
    part.Transparency = transparencyValue
    part.Material = Enum.Material.SmoothPlastic -- Adjust material as needed
end

-- Loop through existing players and set the head properties
for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer and Alive(player) then
        local head = player.Character:FindFirstChild("Head")
        if head then
            head.Massless = true
            head.Size = Vector3.new(Settings.Size, Settings.Size, Settings.Size)
            head.CanCollide = true -- Set CanCollide to true
            MakePartTransparent(head) -- Make the head transparent
        end
    end
    
    player.CharacterAdded:Connect(function()
        while not Alive(player) do
            wait()
        end
        local head = player.Character:FindFirstChild("Head")
        if head then
            head.Massless = true
            head.Size = Vector3.new(Settings.Size, Settings.Size, Settings.Size)
            head.CanCollide = true -- Set CanCollide to true
            MakePartTransparent(head) -- Make the head transparent
        end
    end)
end

-- Handle newly added players
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Wait()
    if Alive(player) then
        local head = player.Character:FindFirstChild("Head")
        if head then
            head.Massless = true
            head.Size = Vector3.new(Settings.Size, Settings.Size, Settings.Size)
            head.CanCollide = true -- Set CanCollide to true
            MakePartTransparent(head) -- Make the head transparent
        end
    end
    
    player.CharacterAdded:Connect(function()
        while not Alive(player) do
            wait()
        end
        local head = player.Character:FindFirstChild("Head")
        if head then
            head.Massless = true
            head.Size = Vector3.new(Settings.Size, Settings.Size, Settings.Size)
            head.CanCollide = true -- Set CanCollide to true
            MakePartTransparent(head) -- Make the head transparent
        end
    end)
end)

    end})

    local Slider = Online:Slider({Name = "Torso: SiZe",Flag = "torsosizes",Side = "Right",Min = 1,Max = 250,Value = 1,Precise = 1,Unit = "",Callback = function(a) 
        
    for _, player in pairs(game.Players:GetPlayers()) do 
        if player ~= game.Players.LocalPlayer then 
            if player.Character then
                local character = player.Character
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    humanoidRootPart.Size = Vector3.new(tonumber(a), tonumber(a), tonumber(a))
                end

                local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
                if torso then
                    torso.Size = Vector3.new(tonumber(a), tonumber(a), tonumber(a))
                end
            end
        end
end
    end})

 






    
       local Weapon = Window:Tab({Name = "Weapon"}) do
       
      local Label = Weapon:Label({Text = "Weapon Spawners.",Side = "Left"})
    
      local Textbox = Weapon:Textbox({Name = "Spawn-In Custom Gun",Flag = "sicg",Side = "Left",Value = "",Placeholder = "GunName Here [Full]",NumberOnly = false,Callback = function(Text) 
        local args = { [1] = "Change", [2] = Text, [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))

      end})
         

     local Button = Weapon:Button({Name = "Spawn-In All Guns",Side = "Left",Callback = function() 
        local args = { [1] = "Change", [2] = "tommygun", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
        local args = { [1] = "Change", [2] = "AK-47 met suppressor", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "AKM", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "AKM met suppressor", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "AKS-74U Met Suppressor", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "BE SIG MCX", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Desert Eagle", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Draco", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Glock 17", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Gold AKM", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Gold Glock17", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Gold Remington 870", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "M17", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "M9", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "MP5SD", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Makarov", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Remington 870", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Revolver", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Rode AKM", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Rode Glock17", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Rode Skorpion", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "SIG MCX VIRTUS", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Shield", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Skorpion", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "UZI", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "Walther P99", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
      local args = { [1] = "Change", [2] = "XM2010", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))
        
        end})
        
         local Button = Weapon:Button({Name = "Spawn-In Tiewraps",Side = "Left",Callback = function() 
            local args = { [1] = "Change", [2] = "Tiewraps", [3] = "Inv" } game:GetService("ReplicatedStorage").Inventory:FireServer(unpack(args))

        end})
        
        
        local Label = Weapon:Label({Text = "Weapon Modifiers.",Side = "Right"})
        
         local Button = Weapon:Button({Name = "OP Gun",Side = "Right",Callback = function() 
            local _player = game:GetService("Players").LocalPlayer
            local gun_names = {
                "AK-47 met suppressor",
                "tommygun",
                "AKM",
                "AKM met suppressor",
                "AKS-74U Met Suppressor",
                "BE SIG MCX",
                "Desert Eagle",
                "Glock 17",
                "Gold Glock17",
                "Gold AKM",
                "Gold Remington 870",
                "M17",
                "M9",
                "MP5SD",
                "Makarov",
                "Remington 870",
                "Revolver",
                "Rode AKM",
                "Rode Glock17",
                "Rode Skorpion",
                "SIG MCX VIRTUS",
                "Shield",
                "Skorpion",
                "UZI",
                "Walther P99",
                "XM2010"
            }
            
            local function applyModificationsToGun(gun_name)
                local _gun = _player.Backpack:FindFirstChild(gun_name)
                if _gun then
                    local _script = _gun.ACS_Modulo.Variaveis:FindFirstChild("Settings")
                    if _script then
                        local _module = require(_script)
            
                        local function rapidFire()
                            _module["Mode"] = "Auto"
                        end 
            
                        local function oneShot()
                            _module["LimbsDamage"] = { 900, 900 } 
                            _module["TorsoDamage"] = { 900, 900 }
                            _module["HeadDamage"] = { 900, 900 }
                        end
            
                        local function noSpread()
                            _module["MinSpread"] = 0
                            _module["axSpread"] = 0
                        end
            
                        local function noRecoil()
                            _module["SwayBase"] = 0
                            _module["VRecoil"] = { 0, 0 }
                            _module["HRecoil"] = { 0, 0 }
                            _module["AimRecoilReduction"] = 50
                            _module["MinRecoilPower"] = 0
                            _module["MaxRecoilPower"] = 0
                            _module["RecoilPowerStepAmount"] = 0
                            _module["RecoilPunch"] = 0
                            _module["AimInaccuracyStepAmount"] = 0
                            print("done")
                        end
            
                        noRecoil()
                        noSpread()
                        oneShot()
                        rapidFire()
                    end
                end
            end
            
            for _, gun_name in ipairs(gun_names) do
                applyModificationsToGun(gun_name)
            end
        end})
        
         local Button = Weapon:Button({Name = "No-Recoil",Side = "Right",Callback = function() 
            local _player = game:GetService("Players").LocalPlayer

            local weaponNames = {
                "AK-47 met suppressor",
                "AKM",
                "AKM met suppressor",
                "AKS-74U Met Suppressor",
                "BE SIG MCX",
                "Desert Eagle",
                "Glock 17",
                "tommygun",
                "Gold Glock17",
                "Gold AKM",
                "Gold Remington 870",
                "M17",
                "M9",
                "MP5SD",
                "Makarov",
                "Remington 870",
                "Revolver",
                "Rode AKM",
                "Rode Glock17",
                "Rode Skorpion",
                "SIG MCX VIRTUS",
                "Shield",
                "Skorpion",
                "UZI",
                "Walther P99",
                "XM2010"
            }
        
            local function modifyWeaponModule(weapon)
                local _gun = _player.Backpack:FindFirstChild(weapon)
                if _gun then
                    local _module = _gun.ACS_Modulo:FindFirstChild("Settings")
                    if _module then
                        _module = require(_module)
        
                        local function noSpread()
                            _module.MinSpread = 0
                            _module.axSpread = 0
                        end
        
                        local function noRecoil()
                            _module.SwayBase = 0
                            _module.VRecoil = {0, 0}
                            _module.HRecoil = {0, 0}
                            _module.AimRecoilReduction = 50
                            _module.MinRecoilPower = 0
                            _module.MaxRecoilPower = 0
                            _module.RecoilPowerStepAmount = 0
                            _module.RecoilPunch = 0
                            _module.AimInaccuracyStepAmount = 0
                            print("Done modifying", weapon)
                        end
        
                        noRecoil()
                        noSpread()
                    end
                end
            end
        
            for _, weaponName in ipairs(weaponNames) do
                modifyWeaponModule(weaponName)
            end
        end})
        
         local Button = Weapon:Button({Name = "FreeZe Ammo",Side = "Right",Callback = function() 
            local player = game.Players.LocalPlayer

            local function freezeAmmo(weaponName)
                local Backpack = player.Backpack
                local Weapon = Backpack:FindFirstChild(weaponName)
            
                if Weapon then
                    local ACS_Modulo = Weapon:WaitForChild("ACS_Modulo")
                    local Variaveis = ACS_Modulo:WaitForChild("Variaveis")
                    
                    local StoredAmmoValue = Variaveis.StoredAmmo.Value
                    local AmmoValue = Variaveis.Ammo.Value
                    
                    while true do
                        Variaveis.StoredAmmo.Value = StoredAmmoValue
                        Variaveis.Ammo.Value = AmmoValue
                        wait(0.1) -- Adjust the wait time as needed
                    end
                else
                    warn("Weapon not found:", weaponName)
                end
            end
            
            local weaponsToFreeze = {
                "AK-47 met suppressor",
                 "tommygun",
                "AKM",
                "AKM met suppressor",
                "AKS-74U Met Suppressor",
                "BE SIG MCX",
                "Desert Eagle",
                "Glock 17",
                "Gold Glock17",
                "Gold AKM",
                "Gold Remington 870",
                "M17",
                "M9",
                "MP5SD",
                "Makarov",
                "Remington 870",
                "Revolver",
                "Rode AKM",
                "Rode Glock17",
                "Rode Skorpion",
                "SIG MCX VIRTUS",
                "Shield",
                "Skorpion",
                "UZI",
                "Walther P99",
                "XM2010"
            }
            
            for _, weaponName in ipairs(weaponsToFreeze) do
                spawn(function()
                    freezeAmmo(weaponName)
                end)
            end
        end})
        
         local Button = Weapon:Button({Name = "Anti-Jam",Side = "Right",Callback = function() 
            local weapons = {
                "AK-47 met suppressor",
                "tommygun",
                "AKM",
                "AKM met suppressor",
                "AKS-74U Met Suppressor",
                "BE SIG MCX",
                "Desert Eagle",
                "Glock 17",
                "Gold Glock17",
                "Gold AKM",
                "Gold Remington 870",
                "M17",
                "M9",
                "MP5SD",
                "Makarov",
                "Remington 870",
                "Revolver",
                "Rode AKM",
                "Rode Glock17",
                "Rode Skorpion",
                "SIG MCX VIRTUS",
                "Shield",
                "Skorpion",
                "UZI",
                "Walther P99",
                "XM2010"
            }
            
            -- Function to set Emperrado property to false for all weapons
            local function setEmperradoFalse()
                while wait() do
                    for _, weaponName in ipairs(weapons) do
                        local weapon = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(weaponName)
                        if weapon then
                            local acsModulo = weapon:FindFirstChild("ACS_Modulo")
                            if acsModulo then
                                acsModulo.Variaveis.Emperrado = false
                            end
                        end
                    end
                end
            end
            setEmperradoFalse()
            
        end})

        local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer.Backpack

local weaponNames = {
    "AK-47 met suppressor",
    "tommygun",
    "AKM",
    "AKM met suppressor",
    "AKS-74U Met Suppressor",
    "BE SIG MCX",
    "Desert Eagle",
    "Glock 17",
    "Gold Glock17",
    "Gold AKM",
    "Gold Remington 870",
    "M17",
    "M9",
    "MP5SD",
    "Makarov",
    "Remington 870",
    "Revolver",
    "Rode AKM",
    "Rode Glock17",
    "Rode Skorpion",
    "SIG MCX VIRTUS",
    "Shield",
    "Skorpion",
    "UZI",
    "Walther P99",
    "XM2010"
}

local function modifyWeaponModule(weapon)
    local gun = Backpack:FindFirstChild(weapon)
    if gun then
        local script = gun:FindFirstChild("ACS_Modulo"):FindFirstChild("Variaveis"):FindFirstChild("Settings")
        if script then
            local module = require(script)
            module["Mode"] = "Auto"
        end
    end
end
    
    local Toggle = Weapon:Toggle({Name = "Make Gun Automatic",Flag = "mga",Side = "Right",Value = false,Callback = function(Value) 
        if Value == true then
            for _, weaponName in ipairs(weaponNames) do
                modifyWeaponModule(weaponName)
            end
        elseif Value == false then
            -- Handle setting the mode to "Semi" when the switch is turned off
        end
        end})
    
    
    
    end
    
    --[[
       local Teleports = Window:Tab({Name = "Teleports"}) do
      
    
    end
    ]]
    
    
    
       local Aimvis = Window:Tab({Name = "Aimbot And Visuals"}) do
        local Label = Aimvis:Label({Text = "Aimbot.",Side = "Left"})
    

        local loadstring, game, getgenv, setclipboard = loadstring, game, getgenv, setclipboard

if getgenv().Aimbot then return end


loadstring(game:HttpGet("https://raw.githubusercontent.com/CriminalMM/rep/main/aiming"))()

local Aimbot = getgenv().Aimbot
local Settings, FOVSettings, Functions = Aimbot.Settings, Aimbot.FOVSettings, Aimbot.Functions

    
         local Toggle = Aimvis:Toggle({Name = "Enable Aimbot",Flag = "aimenable",Side = "Left",Value = false,Callback = function(Value) 
            Settings.Enabled = Value
        end})

        local Slider = Aimvis:Slider({Name = "Smoothness",Flag = "smth",Side = "Left",Min = 0,Max = 5,Value = 0,Precise = 1,Unit = "",Callback = function(Value_Number) 
            Settings.Sensitivity = Value
        end})

local Toggle = Aimvis:Toggle({Name = "Team Check",Flag = "tec",Side = "Left",Value = false,Callback = function(Value) 
    Settings.TeamCheck = Value
            end})

local Toggle = Aimvis:Toggle({Name = "Wall Check",Flag = "wac",Side = "Left",Value = false,Callback = function(Value) 
    Settings.WallCheck = Value
end})

local Toggle = Aimvis:Toggle({Name = "Alive Check",Flag = "alc",Side = "Left",Value = false,Callback = function(Value) 
    Settings.AliveCheck = Value
end})

local Toggle = Aimvis:Toggle({Name = "Enable FoV Circle",Flag = "efc",Side = "Left",Value = false,Callback = function(Value) 
    FOVSettings.Enabled = Value
end})

local Toggle = Aimvis:Toggle({Name = "Enable Filled FoV Circle",Flag = "effc",Side = "Left",Value = false,Callback = function(Value) 
    FOVSettings.Filled = Value
end})

local Slider = Aimvis:Slider({Name = "Field of View Circle Size",Flag = "fovs",Side = "Left",Min = 1,Max = 500,Value = 80,Precise = 1,Unit = "",Callback = function(Value) 
    FOVSettings.Amount = Value
end})

local Slider = Aimvis:Slider({Name = "Field of View Circle Sides",Flag = "fovside",Side = "Left",Min = 1,Max = 60,Value = 60,Precise = 1,Unit = "",Callback = function(Value) 
    FOVSettings.Sides = Value
end})

local Slider = Aimvis:Slider({Name = "Field of View Circle Thickness",Flag = "fovt",Side = "Left",Min = 1,Max = 50,Value = 1,Precise = 1,Unit = "",Callback = function(Value) 
    FOVSettings.Thickness = Value       
end})

--[[
local Label = Aimvis:Label({Text = "Silent Aimbot.",Side = "Left"})

--// Silent Render:
local Config = {
    Enabled = false,
    TeamCheck = false,
    HitPart = "",
    Method = ""
}

local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local GetChildren = game.GetChildren
local WorldToScreen = Camera.WorldToScreenPoint
local FindFirstChild = game.FindFirstChild

local function getPositionOnScreen(Vector)
    local Vec3, OnScreen = WorldToScreen(Camera, Vector)
    return Vector2.new(Vec3.X, Vec3.Y), OnScreen
end

local function getDirection(Origin, Position)
    return (Position - Origin).Unit * 1000
end

local function getMousePosition()
    return Vector2.new(Mouse.X, Mouse.Y)
end

local function getClosestPlayer()
    if not Config.HitPart then return end
    local Closest
    local DistanceToMouse
    for _, Player in next, GetChildren(Players) do
        if Player == LocalPlayer then continue end
        if Config.TeamCheck and Player.Team == LocalPlayer.Team then continue end

        local Character = Player.Character

        if not Character then continue end

        local HumanoidRootPart = FindFirstChild(Character, "HumanoidRootPart")
        local Humanoid = FindFirstChild(Character, "Humanoid")

        if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end

        local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)

        if not OnScreen then continue end

        local Distance = (getMousePosition() - ScreenPosition).Magnitude
        if Distance <= (DistanceToMouse or 2000) then
            Closest = Character[Config.HitPart]
            DistanceToMouse = Distance
        end
    end
    return Closest
end

local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", function(...)
    local Method = getnamecallmethod()
    local Arguments = {...}
    local self = Arguments[1]

    if Config.Enabled and self == workspace then
        if Method == "FindPartOnRayWithIgnoreList" and Config.Method == Method then
            local A_Ray = Arguments[2]

            local HitPart = getClosestPlayer()
            if HitPart then
                local Origin = A_Ray.Origin
                local Direction = getDirection(Origin, HitPart.Position)
                Arguments[2] = Ray.new(Origin, Direction)

                return oldNamecall(unpack(Arguments))
            end
        elseif Method == "FindPartOnRayWithWhitelist" and Config.Method == Method then
            local A_Ray = Arguments[2]

            local HitPart = getClosestPlayer()
            if HitPart then
                local Origin = A_Ray.Origin
                local Direction = getDirection(Origin, HitPart.Position)
                Arguments[2] = Ray.new(Origin, Direction)

                return oldNamecall(unpack(Arguments))
            end
        elseif (Method == "FindPartOnRay" or Method == "findPartOnRay") and Config.Method:lower() == Method:lower() then
            local A_Ray = Arguments[2]

            local HitPart = getClosestPlayer()
            if HitPart then
                local Origin = A_Ray.Origin
                local Direction = getDirection(Origin, HitPart.Position)
                Arguments[2] = Ray.new(Origin, Direction)

                return oldNamecall(unpack(Arguments))
            end
        elseif Method == "Raycast" and Config.Method == Method then
            local A_Origin = Arguments[2]

            local HitPart = getClosestPlayer()
            if HitPart then
                Arguments[3] =  getDirection(A_Origin, HitPart.Position)

                return oldNamecall(unpack(Arguments))
            end
        end
    end
    return oldNamecall(...)
end)
--// End Silent Render

local Toggle = Aimvis:Toggle({Name = "Enable Silent Aim",Flag = "silentenabled",Side = "Left",Value = false,Callback = function(Value) 
    Config.Enabled = Value
            end})

local Toggle = Aimvis:Toggle({Name = "Team Check",Flag = "siletec",Side = "Left",Value = false,Callback = function(Value) 
    Config.TeamCheck = Value
            end})

            local Dropdown = Aimvis:Dropdown({Name = "Select Hitpart",Flag = "silenthitpart",Side = "Left",List = {
                {
                    Name = "Head",
                    Mode = "Toggle", -- Button or Toggle
                    Value = false, -- Default
                    Callback = function(Selected)
                        Config.HitPart = "Head"
                    end
                },
                {
                    Name = "HumanoidRootPart",
                    Mode = "Toggle",
                    Value = false,
                    Callback = function(Selected)
                        Config.HitPart = "HumanoidRootPart"
                    end
                }
            }})

 
          local Dropdown = Aimvis:Dropdown({Name = "Select Method",Flag = "silenthitpart",Side = "Left",List = {
                {
                    Name = "None",
                    Mode = "Toggle", -- Button or Toggle
                    Value = false, -- Default
                    Callback = function(Selected)
                        Config.Method = "None"
                    end
                },
                {
                    Name = "Raycast",
                    Mode = "Toggle", -- Button or Toggle
                    Value = false, -- Default
                    Callback = function(Selected)
                        Config.Method = "Raycast"
                    end
                },
                {
                    Name = "FindPartOnRay",
                    Mode = "Toggle", -- Button or Toggle
                    Value = false, -- Default
                    Callback = function(Selected)
                        Config.Method = "FindPartOnRay"
                    end
                },
                {
                    Name = "FindPartOnRayWithWhitelist",
                    Mode = "Toggle", -- Button or Toggle
                    Value = false, -- Default
                    Callback = function(Selected)
                        Config.Method = "FindPartOnRayWithWhitelist"
                    end
                },
                {
                    Name = "FindPartOnRayWithIgnoreList",
                    Mode = "Toggle",
                    Value = false,
                    Callback = function(Selected)
                        Config.Method = "FindPartOnRayWithIgnoreList"
                    end
                }
            }}) 
            ]]
            

--// Loading ESP Modules
local espLib = {
    drawings = {},
    instances = {},
    espCache = {},
    chamsCache = {},
    objectCache = {},
    conns = {},
    whitelist = {}, -- insert string that is the player's name you want to whitelist (turns esp color to whitelistColor in options)
    blacklist = {}, -- insert string that is the player's name you want to blacklist (removes player from esp)
    options = {
        enabled = true,
        minScaleFactorX = 1,
        maxScaleFactorX = 10,
        minScaleFactorY = 1,
        maxScaleFactorY = 10,
        boundingBox = false, -- WARNING | Significant Performance Decrease when true
        boundingBoxDescending = false,
        font = 2,
        fontSize = 13,
        limitDistance = false,
        maxDistance = 1000,
        visibleOnly = false,
        teamCheck = false,
        teamColor = false,
        fillColor = nil,
        whitelistColor = Color3.new(1, 0, 0),
        outOfViewArrows = false,
        outOfViewArrowsFilled = false,
        outOfViewArrowsSize = 25,
        outOfViewArrowsRadius = 100,
        outOfViewArrowsColor = Color3.new(1, 1, 1),
        outOfViewArrowsTransparency = 0.5,
        outOfViewArrowsOutline = false,
        outOfViewArrowsOutlineFilled = false,
        outOfViewArrowsOutlineColor = Color3.new(1, 1, 1),
        outOfViewArrowsOutlineTransparency = 1,
        names = false,
        nameTransparency = 1,
        nameColor = Color3.new(1, 1, 1),
        boxes = false,
        boxesTransparency = 1,
        boxesColor = Color3.new(1, 0, 0),
        boxFill = false,
        boxFillTransparency = 0.5,
        boxFillColor = Color3.new(1, 0, 0),
        healthBars = false,
        healthBarsSize = 1,
        healthBarsTransparency = 1,
        healthBarsColor = Color3.new(0, 1, 0),
        healthText = false,
        healthTextTransparency = 1,
        healthTextSuffix = "%",
        healthTextColor = Color3.new(1, 1, 1),
        distance = false,
        distanceTransparency = 1,
        distanceSuffix = " Studs",
        distanceColor = Color3.new(1, 1, 1),
        tracers = false,
        tracerTransparency = 1,
        tracerColor = Color3.new(1, 1, 1),
        tracerOrigin = "Bottom", -- Available [Mouse, Top, Bottom]
        chams = false,
        chamsFillColor = Color3.new(1, 0, 0),
        chamsFillTransparency = 0.5,
        chamsOutlineColor = Color3.new(),
        chamsOutlineTransparency = 0
    },
 };
 local espLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Sirius/request/library/esp/esp.lua'),true))()
 -------------------------Bypass by iris
 getgenv().BypassSettings = {
   ["Crystal AntiCheat"] = false,
   ["Adonis"] = false,
 
   ["Anti-Obfuscated Scripts"] = false,-- CANNOT BE ENABLED WITH CRYSTAL This will block any obfuscated script on the client from running (Not executed by your exploit thought)
   ["Random"] = false, -- Will disallow scripts calling, GetPropertyChanged signal on WalkSpeed, JumpPower, Gravity, Health, LogService
 
   ["Enable Kill Logs"] = false, -- Say if you want to get told what's bypassed
 }
 
 loadstring(game:HttpGet("https://irisapp.ca/TheGoodSucc/iAntiCheat.lua"))()
    
   
   local Label = Aimvis:Label({Text = "ESP / Visuals.",Side = "Right"})
    
local Toggle = Aimvis:Toggle({Name = "Enable ESP",Flag = "enableesp",Side = "Right",Value = false,Callback = function(Value) 
    local espfunc = Value
    if espfunc then
    espLib:Load()
    end
    if not espfunc then
    espLib:Unload()
    end
end})

local Toggle = Aimvis:Toggle({Name = "Tracer ESP",Flag = "traesp",Side = "Right",Value = false,Callback = function(Value) 
    espLib.options.tracers = Value
end})
        
local Toggle = Aimvis:Toggle({Name = "Box ESP",Flag = "besesp",Side = "Right",Value = false,Callback = function(Value) 
    espLib.options.boxes = Value
end})

local Toggle = Aimvis:Toggle({Name = "Boxfilled ESP",Flag = "bflesp",Side = "Right",Value = false,Callback = function(Value) 
    espLib.options.boxFill = Value
end})

local Toggle = Aimvis:Toggle({Name = "HealthBar ESP",Flag = "hbesp",Side = "Right",Value = false,Callback = function(Value) 
    espLib.options.healthBars = Value
end})

local Toggle = Aimvis:Toggle({Name = "HealthText ESP",Flag = "hresp",Side = "Right",Value = false,Callback = function(Value) 
    espLib.options.healthText = Value
end})

local Toggle = Aimvis:Toggle({Name = "Name ESP",Flag = "naesp",Side = "Right",Value = false,Callback = function(Value) 
    espLib.options.names = Value
end})
    
local Label = Aimvis:Label({Text = "ESP Configuration.",Side = "Right"})

local Toggle = Aimvis:Toggle({Name = "Visible Check",Flag = "visiblecheckesp",Side = "Right",Value = false,Callback = function(Value) 
    espLib.options.visibleOnly = Value
end})

local Toggle = Aimvis:Toggle({Name = "Team Check",Flag = "teamcheckesp",Side = "Right",Value = false,Callback = function(Value) 
    espLib.options.teamCheck = Value
end})

local Toggle = Aimvis:Toggle({Name = "Limited Distance",Flag = "limiteddistance",Side = "Right",Value = false,Callback = function(Value) 
    espLib.options.limitDistance = Value
end})

local Slider = Aimvis:Slider({Name = "Draw Distance",Flag = "drawdistance",Side = "Right",Min = 1,Max = 50,Value = 1,Precise = 1,Unit = "",Callback = function(Value) 
    espLib.options.maxDistance = Value
end})

espLib.options.outOfViewArrows = false
    espLib.options.outOfViewArrowsOutline = false
    espLib.options.outOfViewArrowsFilled = false
    espLib.options.outOfViewArrowsOutlineFilled = false
    espLib.options.teamCheck = false
    espLib.options.boxes = false
    espLib.options.boxFill = false
    espLib.options.healthBars = false
    espLib.options.healthText = false
    espLib.options.tracers = false
    espLib.options.limitDistance = false
    espLib.options.visibleOnly = false
    espLib.options.chams = false
   
   end
    
   












    local OptionsTab = Window:Tab({Name = "Options"}) do
        local MenuSection = OptionsTab:Section({Name = "Menu",Side = "Left"}) do
            local UIToggle = MenuSection:Toggle({Name = "UI Enabled",Flag = "UI/Enabled",IgnoreFlag = true,
            Value = Window.Enabled,Callback = function(Bool) Window.Enabled = Bool end})
            UIToggle:Keybind({Value = "RightShift",Flag = "UI/Keybind",DoNotClear = true})
            UIToggle:Colorpicker({Flag = "UI/Color",Value = {1,0.25,1,0,true},
            Callback = function(HSVAR,Color) Window.Color = Color end})

            MenuSection:Toggle({Name = "Open On Load",Flag = "UI/OOL",Value = true})
            MenuSection:Toggle({Name = "Blur Gameplay",Flag = "UI/Blur",Value = false,
            Callback = function(Bool) Window.Blur = Bool end})

            MenuSection:Toggle({Name = "Watermark",Flag = "UI/Watermark/Enabled",Value = true,
            Callback = function(Bool) Window.Watermark.Enabled = Bool end}):Keybind({Flag = "UI/Watermark/Keybind"})
        end
        
    

        OptionsTab:AddConfigSection("Bracket_Example","Left")

        local BackgroundSection = OptionsTab:Section({Name = "Background",Side = "Right"}) do
            BackgroundSection:Colorpicker({Name = "Color",Flag = "Background/Color",Value = {1,1,0,0,false},
            Callback = function(HSVAR,Color) Window.Background.ImageColor3 = Color Window.Background.ImageTransparency = HSVAR[4] end})
            BackgroundSection:Textbox({HideName = true,Flag = "Background/CustomImage",Placeholder = "rbxassetid://ImageId",
            Callback = function(String,EnterPressed) if EnterPressed then Window.Background.Image = String end end})
            BackgroundSection:Dropdown({HideName = true,Flag = "Background/Image",List = {
                {Name = "Empty/None",Mode = "Button",Callback = function()
                    Window.Background.Image = "rbxassetid://"
                    Window.Flags["Background/CustomImage"] = ""
                end,Value = true},
                {Name = "Legacy",Mode = "Button",Callback = function()
                    Window.Background.Image = "rbxassetid://2151741365"
                    Window.Flags["Background/CustomImage"] = ""
                end},
                {Name = "Hearts",Mode = "Button",Callback = function()
                    Window.Background.Image = "rbxassetid://6073763717"
                    Window.Flags["Background/CustomImage"] = ""
                end},
                {Name = "Abstract",Mode = "Button",Callback = function()
                    Window.Background.Image = "rbxassetid://6073743871"
                    Window.Flags["Background/CustomImage"] = ""
                end},
                {Name = "Hexagon",Mode = "Button",Callback = function()
                    Window.Background.Image = "rbxassetid://6073628839"
                    Window.Flags["Background/CustomImage"] = ""
                end},
                {Name = "Circles",Mode = "Button",Callback = function()
                    Window.Background.Image = "rbxassetid://6071579801"
                    Window.Flags["Background/CustomImage"] = ""
                end},
                {Name = "Lace With Flowers",Mode = "Button",Callback = function()
                    Window.Background.Image = "rbxassetid://6071575925"
                    Window.Flags["Background/CustomImage"] = ""
                end},
                {Name = "Floral",Mode = "Button",Callback = function()
                    Window.Background.Image = "rbxassetid://5553946656"
                    Window.Flags["Background/CustomImage"] = ""
                end,Value = false},
                {Name = "Halloween",Mode = "Button",Callback = function()
                    Window.Background.Image = "rbxassetid://11113209821"
                    Window.Flags["Background/CustomImage"] = ""
                end},
                {Name = "Christmas",Mode = "Button",Callback = function()
                    Window.Background.Image = "rbxassetid://11711560928"
                    Window.Flags["Background/CustomImage"] = ""
                end}
            }})
            BackgroundSection:Slider({Name = "Tile Offset",Flag = "Background/Offset",Wide = true,Min = 74,Max = 296,Value = 74,
            Callback = function(Number) Window.Background.TileSize = UDim2.fromOffset(Number,Number) end})
        end
    end
end

Window:SetValue("Background/Offset",74)
Window:AutoLoadConfig("Bracket_Example")
Window:SetValue("UI/Enabled",Window.Flags["UI/OOL"])

--// Anti-View



local partialName = string.lower(game.Players.LocalPlayer.Name)
local Players = game:GetService("Players")
local targetPlayer = nil

-- Function to find the target player
local function findTargetPlayer()
    for _, player in pairs(Players:GetPlayers()) do
        if string.find(string.lower(player.Name), partialName) then
            targetPlayer = player
            break
        end
    end
end

-- Function to handle chat messages
local function onPlayerChatted(player, msg)
    if msg:lower() == ":view " .. game.Players.LocalPlayer.Name then
        Bracket:Notification2({Title = player.Name .. " is viewing you, be careful",Duration = 8})
    end
end

-- Connect the onPlayerChatted function to Player.Chatted for all players
local function connectToPlayers()
    for _, player in pairs(Players:GetPlayers()) do
        player.Chatted:Connect(function(msg)
            onPlayerChatted(player, msg)
        end)
    end
end

-- Connect the findTargetPlayer function to PlayerAdded
Players.PlayerAdded:Connect(findTargetPlayer)

-- Call findTargetPlayer initially
findTargetPlayer()

-- Connect to players' chat events
connectToPlayers()

local function onPlayerChatted(player, msg)
    if msg:lower() == ":view " .. game.Players.LocalPlayer.Name then
    --    Library:Notify(player.Name .. " is viewing you, be careful", 15)
        Bracket:Notification2({Title = player.Name .. " is viewing you, be careful",Duration = 8})
    elseif msg:lower() == ":unview" then
       -- Library:Notify("You're Safe Again, View Ended")
        Bracket:Notification2({Title = "You're Safe Again, View Ended",Duration = 8})
    end
end

-- Connect the onPlayerChatted function to Player.Chatted for all players
local function connectToPlayers()
    for _, player in pairs(Players:GetPlayers()) do
        player.Chatted:Connect(function(msg)
            onPlayerChatted(player, msg)
        end)
    end
end

-- Rest of your existing code remains the same

-- Connect to players' chat events
connectToPlayers()
